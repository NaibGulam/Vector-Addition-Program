/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package my.vectoradditionquiz;

import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.util.*;
import javax.swing.JFrame;
import my.vectoradditioncalculator.VectorAdditionCalculator;
import my.vectoradditionquiz.VectorAdditionQuizUI;

/**
 *
 * Created by Naib Gulam to quiz the student on vector addition
 */
public class VectorAdditionQuizUI extends javax.swing.JFrame {
    
    // Global variable declaration of ArrayLists
    // Quiz questions
    ArrayList <String> questions = new ArrayList(); 
    // Arraylists of all the possible options for each of the questions
    ArrayList <String> possibleAnswers1 = new ArrayList();
    ArrayList <String> possibleAnswers2 = new ArrayList(); 
    ArrayList <String> possibleAnswers3 = new ArrayList(); 
    ArrayList <String> possibleAnswers4= new ArrayList(); 
    ArrayList <String> possibleAnswers5= new ArrayList(); 
    // Arrayist for the answers
    ArrayList <String> answers = new ArrayList();
    
    // Counters to keep track of the user's score and position of the random correct answer
    int score = 0;
    int index;

    /**
     * Creates new form VectorAdditionQuizUI
     */
    public VectorAdditionQuizUI() {
        initComponents();
        
        // Arraylist of all the questions
        Collections.addAll(questions, "1. What is a vector?", "2. 30 units [180°] + 40 units [270°]?", "3. 20 units [45°] + 25 units [300°] + 15 units [210°]?", 
                "4. Which of the following formulas do you use to determine the resultant magnitude?", "5. 10 units [90°] + 5 units [180°]?");
        // Arrraylists containing the answer options for each of the questions
        Collections.addAll(possibleAnswers1, "magnitude and direction", "magnitude with an arrow", "arrow with a direction", "binary number"); 
        Collections.addAll(possibleAnswers2, "11.2 units [117°]", "9.6 units [180°]", "7.3 units [85°]", "13.5 units [34°]"); 
        Collections.addAll(possibleAnswers3, "√((a)^2 + (b)^2)", "r * cos(θ)", "r * sin(θ)", " tan^-1(resultant y component / resultant x component)");
        Collections.addAll(possibleAnswers4, "50 units [233°]", "46 units [245°]", "53 units [195°]", "49 units [172°]");
        Collections.addAll(possibleAnswers5, "20.3 units [312°]", "22.7 units [277°]", "25.3 units [312°]", "19.4 units [290°]");
        // Arraylist containing the correct answers
        Collections.addAll(answers, "magnitude and direction", "11.2 units [117°]", "√((a)^2 + (b)^2)", "50 units [233°]", "20.3 units [312°]");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        question1ButtonGroup = new javax.swing.ButtonGroup();
        question2ButtonGroup = new javax.swing.ButtonGroup();
        question3ButtonGroup = new javax.swing.ButtonGroup();
        question4ButtonGroup = new javax.swing.ButtonGroup();
        question5ButtonGroup = new javax.swing.ButtonGroup();
        question3Answer3RadioButton = new javax.swing.JRadioButton();
        question3Answer4RadioButton = new javax.swing.JRadioButton();
        question3Answer1RadioButton = new javax.swing.JRadioButton();
        question3Answer2RadioButton = new javax.swing.JRadioButton();
        question3Label = new javax.swing.JLabel();
        question2Answer4RadioButton = new javax.swing.JRadioButton();
        question2Answer3RadioButton = new javax.swing.JRadioButton();
        question2Answer2RadioButton = new javax.swing.JRadioButton();
        question4Label = new javax.swing.JLabel();
        question4Answer1RadioButton = new javax.swing.JRadioButton();
        question1Answer2RadioButton = new javax.swing.JRadioButton();
        question1Answer1RadioButton = new javax.swing.JRadioButton();
        question1Answer4RadioButton = new javax.swing.JRadioButton();
        question5Answer2RadioButton = new javax.swing.JRadioButton();
        question5Answer1RadioButton = new javax.swing.JRadioButton();
        question1Answer3RadioButton = new javax.swing.JRadioButton();
        question2Label = new javax.swing.JLabel();
        question2Answer1RadioButton = new javax.swing.JRadioButton();
        question5Answer4RadioButton = new javax.swing.JRadioButton();
        question5Answer3RadioButton = new javax.swing.JRadioButton();
        question4Answer3RadioButton = new javax.swing.JRadioButton();
        question1Label = new javax.swing.JLabel();
        question4Answer4RadioButton = new javax.swing.JRadioButton();
        question5Label = new javax.swing.JLabel();
        question4Answer2RadioButton = new javax.swing.JRadioButton();
        vectorQuizLabel = new javax.swing.JLabel();
        beginQuizButton = new javax.swing.JButton();
        checkQuizButton = new javax.swing.JButton();
        outputLabel = new javax.swing.JLabel();
        calculatorButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        question3ButtonGroup.add(question3Answer3RadioButton);

        question3ButtonGroup.add(question3Answer4RadioButton);

        question3ButtonGroup.add(question3Answer1RadioButton);

        question3ButtonGroup.add(question3Answer2RadioButton);

        question3Label.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        question3Label.setText("<html>3. Which of the following formulas do you use to determine the resultant magnitude?");

        question2ButtonGroup.add(question2Answer4RadioButton);

        question2ButtonGroup.add(question2Answer3RadioButton);

        question2ButtonGroup.add(question2Answer2RadioButton);

        question4Label.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        question4Label.setText("4. 30 units [180°] + 40 units [270°]?");

        question4ButtonGroup.add(question4Answer1RadioButton);
        question4Answer1RadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                question4Answer1RadioButtonActionPerformed(evt);
            }
        });

        question1ButtonGroup.add(question1Answer2RadioButton);

        question1ButtonGroup.add(question1Answer1RadioButton);
        question1Answer1RadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                question1Answer1RadioButtonActionPerformed(evt);
            }
        });

        question1ButtonGroup.add(question1Answer4RadioButton);

        question5ButtonGroup.add(question5Answer2RadioButton);

        question5ButtonGroup.add(question5Answer1RadioButton);

        question1ButtonGroup.add(question1Answer3RadioButton);

        question2Label.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        question2Label.setText("2. 10 units [90°] + 5 units [180°]?");

        question2ButtonGroup.add(question2Answer1RadioButton);

        question5ButtonGroup.add(question5Answer4RadioButton);

        question5ButtonGroup.add(question5Answer3RadioButton);

        question4ButtonGroup.add(question4Answer3RadioButton);

        question1Label.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        question1Label.setText("1. What is a vector?");

        question4ButtonGroup.add(question4Answer4RadioButton);

        question5Label.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        question5Label.setText("5. 20 units [45°] + 25 units [300°] + 15 units [210°]?");

        question4ButtonGroup.add(question4Answer2RadioButton);

        vectorQuizLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        vectorQuizLabel.setForeground(new java.awt.Color(0, 0, 255));
        vectorQuizLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        vectorQuizLabel.setText("Vector Quiz");

        beginQuizButton.setText("Begin Quiz");
        beginQuizButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                beginQuizButtonActionPerformed(evt);
            }
        });

        checkQuizButton.setText("Check Quiz");
        checkQuizButton.setEnabled(false);
        checkQuizButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkQuizButtonActionPerformed(evt);
            }
        });

        outputLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        outputLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        calculatorButton.setText("Calculator");
        calculatorButton.setEnabled(false);
        calculatorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculatorButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(beginQuizButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkQuizButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(calculatorButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(question1Label, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(question2Answer1RadioButton)
                                    .addComponent(question2Answer2RadioButton)
                                    .addComponent(question2Answer3RadioButton)
                                    .addComponent(question2Answer4RadioButton)
                                    .addComponent(question3Answer1RadioButton)
                                    .addComponent(question3Answer2RadioButton)
                                    .addComponent(question3Answer3RadioButton)
                                    .addComponent(question3Answer4RadioButton)
                                    .addComponent(question4Answer1RadioButton)
                                    .addComponent(question4Answer2RadioButton)
                                    .addComponent(question4Answer3RadioButton)
                                    .addComponent(question4Answer4RadioButton)
                                    .addComponent(question5Answer1RadioButton)
                                    .addComponent(question5Answer2RadioButton)
                                    .addComponent(question5Answer3RadioButton)
                                    .addComponent(question5Answer4RadioButton)
                                    .addComponent(question1Answer4RadioButton)
                                    .addComponent(question1Answer1RadioButton)
                                    .addComponent(question1Answer3RadioButton)
                                    .addComponent(question1Answer2RadioButton))))
                        .addGap(222, 222, 222))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(question2Label)
                            .addComponent(question4Label)
                            .addComponent(question5Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(outputLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(question3Label, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(vectorQuizLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(vectorQuizLabel)
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(beginQuizButton)
                    .addComponent(checkQuizButton)
                    .addComponent(calculatorButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(question1Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(question1Answer1RadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(question1Answer2RadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(question1Answer3RadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(question1Answer4RadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(question2Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(question2Answer1RadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(question2Answer2RadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(question2Answer3RadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(question2Answer4RadioButton)
                .addGap(7, 7, 7)
                .addComponent(question3Label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(question3Answer1RadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(question3Answer2RadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(question3Answer3RadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(question3Answer4RadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(question4Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(question4Answer1RadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(question4Answer2RadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(question4Answer3RadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(question4Answer4RadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(question5Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(question5Answer1RadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(question5Answer2RadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(question5Answer3RadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(question5Answer4RadioButton)
                .addGap(18, 18, 18)
                .addComponent(outputLabel)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void question4Answer1RadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_question4Answer1RadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_question4Answer1RadioButtonActionPerformed

    private void question1Answer1RadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_question1Answer1RadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_question1Answer1RadioButtonActionPerformed

    private void beginQuizButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beginQuizButtonActionPerformed
        // Randomizes the order of teh possible answers for each of the questions 
        randomizeAndDisplayOptions();
        
        // enable the check quiz button to check user's answers
        checkQuizButton.setEnabled(true);
    }//GEN-LAST:event_beginQuizButtonActionPerformed

    private void checkQuizButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkQuizButtonActionPerformed
        // Int variable declaration to find the index of the correct answer 
        int index1, index2, index3, index4, index5;
        
        // Retrieves where the answer is located in the shuffled Arraylists
        index1 = possibleAnswers1.indexOf(answers.get(0));
        index2 = possibleAnswers2.indexOf(answers.get(1));
        index3 = possibleAnswers3.indexOf(answers.get(2));
        index4 = possibleAnswers4.indexOf(answers.get(3));
        index5 = possibleAnswers5.indexOf(answers.get(4));
        
        // Trace variables
        System.out.println(index1);
        System.out.println(index2);
        System.out.println(index3);
        System.out.println(index4);
        System.out.println(index5);
        
        /**
         * The for loop is used to call a method as a condition and passes
         * the index of the answers to check whether the user has choosen
         * the correct box which then increments the score variable. If the user
         * hasn't choosen the correct answer then he gets no points. The user
         * can also leave a box empty if he/she doesn't know the answer, and the
         * program will assume a wrong answer
         */
        // i does from 1 -> 5, which represents each of the questions
        for (int i = 1; i <= 5; i++) {
            if (checkAnswers(i, index1, index2, index3, index4, index5) == true)
            {
                score++;
            }
        }
        
        // Disables the check quiz button so that the user clicks it and add to their score
        checkQuizButton.setEnabled(false);
        
        // outputs user's score and comment
        switch(score) {
            case 0:
                outputLabel.setText("You scored 0/5. Did you read the lesson?");
                break;
            case 1:
                outputLabel.setText("You scored 1/5. You should have reviewed more");
                break;
            case 2:
                outputLabel.setText("You scored 2/5. Good job");
                break;
            case 4:
                outputLabel.setText("You scored 4/5. Wow!");
                break;
            case 5:
                outputLabel.setText("You scored 5/5. Outstanding!");
                break;  
        }
        
        // Enable the button to give the user access to the calculator
        calculatorButton.setEnabled(true);
    }//GEN-LAST:event_checkQuizButtonActionPerformed

    private void calculatorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculatorButtonActionPerformed
        // Declaration and initialization to open VectorAdditionCalculator when the user is dome the quiz
        VectorAdditionCalculator a = new VectorAdditionCalculator();
        a.setVisible(true);
        
        // Closes the old window so to open the new window
        WindowEvent winClosingEvent = new WindowEvent (this,WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(winClosingEvent);
    }//GEN-LAST:event_calculatorButtonActionPerformed

    public void randomizeAndDisplayOptions() {
        // Randomizes each of the arraylists containing the options for each of the questions
        Collections.shuffle(possibleAnswers1);
        Collections.shuffle(possibleAnswers2);
        Collections.shuffle(possibleAnswers3);
        Collections.shuffle(possibleAnswers4);
        Collections.shuffle(possibleAnswers5);
        
        /**
         * After the Arraylists have been randomized, each button gets assigned an answer option.
         * Although it is repetitive, I have to assign each of the buttons their own randomized
         * option
         */
        question1Answer1RadioButton.setText(possibleAnswers1.get(0));
        question1Answer2RadioButton.setText(possibleAnswers1.get(1));
        question1Answer3RadioButton.setText(possibleAnswers1.get(2));
        question1Answer4RadioButton.setText(possibleAnswers1.get(3));
        
        question2Answer1RadioButton.setText(possibleAnswers2.get(0));
        question2Answer2RadioButton.setText(possibleAnswers2.get(1));
        question2Answer3RadioButton.setText(possibleAnswers2.get(2));
        question2Answer4RadioButton.setText(possibleAnswers2.get(3));
        
        question3Answer1RadioButton.setText(possibleAnswers3.get(0));
        question3Answer2RadioButton.setText(possibleAnswers3.get(1));
        question3Answer3RadioButton.setText(possibleAnswers3.get(2));
        question3Answer4RadioButton.setText(possibleAnswers3.get(3));
        
        question4Answer1RadioButton.setText(possibleAnswers4.get(0));
        question4Answer2RadioButton.setText(possibleAnswers4.get(1));
        question4Answer3RadioButton.setText(possibleAnswers4.get(2));
        question4Answer4RadioButton.setText(possibleAnswers4.get(3));
        
        question5Answer1RadioButton.setText(possibleAnswers5.get(0));
        question5Answer2RadioButton.setText(possibleAnswers5.get(1));
        question5Answer3RadioButton.setText(possibleAnswers5.get(2));
        question5Answer4RadioButton.setText(possibleAnswers5.get(3));
    }
    
    public boolean checkAnswers(int question, int indexOne, int indexTwo, int indexThree, int indexFour, int indexFive) {
        
        /**
         * All the if statements are used to determine if the user as choosen
         * the correct box containing the right answer. It doesn't use if-else
         * statements because the program will then run into bugs with adding 
         * the score up because I have to be specific and can't make assumptions 
         * The if statements checks what the value of the index variable is
         * (which is the button containing the correct answer) and then
         * checks to see if the user has selected that button. The for loop
         * in the method call makes it check all of the questions and returns true 
         * if the right answer had been selected and false if no correct has been 
         * selected. Although, this is repetitive, I have make the code to check 
         * if all the buttons since any one of them could have the right answer, but
         * really the program doesn't even go through all the if statements.
         */
        if (question == 1) {
            if (indexOne == 0 && question1Answer1RadioButton.isSelected()) {
                return true;
            }
            if (indexOne == 1 && question1Answer2RadioButton.isSelected()) {
                return true;
            }
            if (indexOne == 2 && question1Answer3RadioButton.isSelected()) {
                return true;
            }
            if (indexOne == 3 && question1Answer4RadioButton.isSelected()) {
                return true;
            }
        }
        if (question == 2) {
            if (indexTwo == 0 && question2Answer1RadioButton.isSelected()) {
                return true;
            }
            if (indexTwo == 1 && question2Answer2RadioButton.isSelected()) {
                return true;
            }
            if (indexTwo == 2 && question2Answer3RadioButton.isSelected()) {
                return true;
            }
            if (indexTwo == 3 && question2Answer4RadioButton.isSelected()) {
                return true;
            }
        }
        if (question == 3) {
            if (indexThree == 0 && question3Answer1RadioButton.isSelected()) {
                return true;
            }
            if (indexThree == 1 && question3Answer2RadioButton.isSelected()) {
                return true;
            }
            if (indexThree == 2 && question3Answer3RadioButton.isSelected()) {
                return true;
            }
            if (indexThree == 3 && question3Answer4RadioButton.isSelected()) {
                return true;
            }
        }
        if (question == 4) {
            if (indexFour == 0 && question4Answer1RadioButton.isSelected()) {
                return true;
            }
            if (indexFour == 1 && question4Answer2RadioButton.isSelected()) {
                return true;
            }
            if (indexFour == 2 && question4Answer3RadioButton.isSelected()) {
                return true;
            }
            if (indexFour == 3 && question4Answer4RadioButton.isSelected()) {
                return true;
            }
        }
        if (question == 5) {
            if (indexFive == 0 && question5Answer1RadioButton.isSelected()) {
                return true;
            }
            if (indexFive == 1 && question5Answer2RadioButton.isSelected()) {
                return true;
            }
            if (indexFive == 2 && question5Answer3RadioButton.isSelected()) {
                return true;
            }
            if (indexFive == 3 && question5Answer4RadioButton.isSelected()) {
                return true;
            }
        }
        // Returns false if the user hasn't choosen the correct answer for a question
        return false;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VectorAdditionQuizUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VectorAdditionQuizUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VectorAdditionQuizUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VectorAdditionQuizUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VectorAdditionQuizUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton beginQuizButton;
    private javax.swing.JButton calculatorButton;
    private javax.swing.JButton checkQuizButton;
    private javax.swing.JLabel outputLabel;
    private javax.swing.JRadioButton question1Answer1RadioButton;
    private javax.swing.JRadioButton question1Answer2RadioButton;
    private javax.swing.JRadioButton question1Answer3RadioButton;
    private javax.swing.JRadioButton question1Answer4RadioButton;
    private javax.swing.ButtonGroup question1ButtonGroup;
    private javax.swing.JLabel question1Label;
    private javax.swing.JRadioButton question2Answer1RadioButton;
    private javax.swing.JRadioButton question2Answer2RadioButton;
    private javax.swing.JRadioButton question2Answer3RadioButton;
    private javax.swing.JRadioButton question2Answer4RadioButton;
    private javax.swing.ButtonGroup question2ButtonGroup;
    private javax.swing.JLabel question2Label;
    private javax.swing.JRadioButton question3Answer1RadioButton;
    private javax.swing.JRadioButton question3Answer2RadioButton;
    private javax.swing.JRadioButton question3Answer3RadioButton;
    private javax.swing.JRadioButton question3Answer4RadioButton;
    private javax.swing.ButtonGroup question3ButtonGroup;
    private javax.swing.JLabel question3Label;
    private javax.swing.JRadioButton question4Answer1RadioButton;
    private javax.swing.JRadioButton question4Answer2RadioButton;
    private javax.swing.JRadioButton question4Answer3RadioButton;
    private javax.swing.JRadioButton question4Answer4RadioButton;
    private javax.swing.ButtonGroup question4ButtonGroup;
    private javax.swing.JLabel question4Label;
    private javax.swing.JRadioButton question5Answer1RadioButton;
    private javax.swing.JRadioButton question5Answer2RadioButton;
    private javax.swing.JRadioButton question5Answer3RadioButton;
    private javax.swing.JRadioButton question5Answer4RadioButton;
    private javax.swing.ButtonGroup question5ButtonGroup;
    private javax.swing.JLabel question5Label;
    private javax.swing.JLabel vectorQuizLabel;
    // End of variables declaration//GEN-END:variables
}
