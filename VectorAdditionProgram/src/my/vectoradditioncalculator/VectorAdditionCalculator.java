/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package my.vectoradditioncalculator;

import java.text.*;
import javax.swing.JFrame;

/**
 *
 * @author User
 */
public class VectorAdditionCalculator extends javax.swing.JFrame {
    
    // Double global variable declaration to keep track of the vector's data. Initialized as 0 to prevent bugs and errors
    double vectorX = 0;
    double vectorY = 0;
    double resultantVector = 0;
    double resultantComponentX = 0;
    double resultantComponentY = 0;
    double resultantAngle = 0;
    // Formats the the output 
    DecimalFormat formatVector = new DecimalFormat("0.0");

    /**
     * Creates new form VectorAdditionCalculator
     */
    public VectorAdditionCalculator() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputTextArea = new javax.swing.JTextArea();
        enterVectorInformationLabel = new javax.swing.JLabel();
        vectorAdditionLabel = new javax.swing.JLabel();
        magnitudeLabel = new javax.swing.JLabel();
        angleLabel = new javax.swing.JLabel();
        magnitudeInput = new javax.swing.JTextField();
        angleInput = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        resultantVectorOutput = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        vectorsListOutput = new javax.swing.JTextArea();
        addButton = new javax.swing.JButton();
        clearVectorButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        enterPositiveMag = new javax.swing.JLabel();
        messageLabel = new javax.swing.JLabel();
        resultantVectorLabel = new javax.swing.JLabel();
        vectorsListLabel = new javax.swing.JLabel();

        jLabel2.setText("jLabel2");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        outputTextArea.setColumns(20);
        outputTextArea.setLineWrap(true);
        outputTextArea.setRows(5);
        jScrollPane1.setViewportView(outputTextArea);

        enterVectorInformationLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        enterVectorInformationLabel.setText("Enter Vector Information:");

        vectorAdditionLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        vectorAdditionLabel.setForeground(new java.awt.Color(0, 0, 255));
        vectorAdditionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        vectorAdditionLabel.setText("2-Dimension Vector Addition");

        magnitudeLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        magnitudeLabel.setText("Magnitude:");

        angleLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        angleLabel.setText("Angle:");

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        resultantVectorOutput.setColumns(20);
        resultantVectorOutput.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        resultantVectorOutput.setRows(5);
        jScrollPane3.setViewportView(resultantVectorOutput);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        vectorsListOutput.setColumns(20);
        vectorsListOutput.setRows(5);
        jScrollPane2.setViewportView(vectorsListOutput);

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        clearVectorButton.setText("Clear Vectors");
        clearVectorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearVectorButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        enterPositiveMag.setFont(new java.awt.Font("Tahoma", 2, 10)); // NOI18N
        enterPositiveMag.setText("Enter a positive and magnitude and angle between 0 and 360");

        messageLabel.setFont(new java.awt.Font("Tahoma", 2, 9)); // NOI18N
        messageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        messageLabel.setText("Don't tell your teacher about this");

        resultantVectorLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        resultantVectorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        resultantVectorLabel.setText("Resultant Vector");

        vectorsListLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        vectorsListLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        vectorsListLabel.setText("Vectors List");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(enterVectorInformationLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(magnitudeLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(magnitudeInput, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(angleLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(angleInput, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(enterPositiveMag, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(addButton)
                                .addGap(18, 18, 18)
                                .addComponent(clearVectorButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(resultantVectorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(vectorsListLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(messageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(exitButton))
                    .addComponent(jScrollPane1))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(vectorAdditionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE)
                    .addGap(12, 12, 12)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(46, Short.MAX_VALUE)
                .addComponent(messageLabel)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(resultantVectorLabel)
                            .addComponent(vectorsListLabel)
                            .addComponent(enterVectorInformationLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(magnitudeLabel)
                            .addComponent(magnitudeInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(angleLabel)
                            .addComponent(angleInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(enterPositiveMag)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(clearVectorButton)
                            .addComponent(addButton))
                        .addGap(30, 30, 30)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exitButton)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(vectorAdditionLabel)
                    .addContainerGap(660, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        
        /**
         * If...else statements are used to check if the user has entered a valid magnitude and angle.
         * If the user hasn't entered valid magnitude or angle the, it will display a message, but if 
         * the user has entered a valid input, it will execute the performAndAddVectors method
         */
        if (angleInput.getText().isEmpty() || (Double.parseDouble(angleInput.getText()) < 0) || (Double.parseDouble(angleInput.getText()) > 360))
        {
            outputTextArea.setText("Invalid Angle");
        }
        else if ((Double.parseDouble(magnitudeInput.getText()) < 0) || (magnitudeInput.getText().isEmpty()))
        {
            outputTextArea.setText("Invalid Magnitude");
        }
        else
        {
            teachAndAddVectors();
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void clearVectorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearVectorButtonActionPerformed
        // method call to clear vectors if the user wants add new vectors
        clearVectors();
    }//GEN-LAST:event_clearVectorButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0); // Closes the rogram when the exit button is clciked
    }//GEN-LAST:event_exitButtonActionPerformed
    
    public void clearVectors() {
        resultantComponentX = 0;
        resultantComponentY = 0;
        magnitudeInput.setText("");
        angleInput.setText("");
        resultantVectorOutput.setText("");
        vectorsListOutput.setText("");
        outputTextArea.setText("");
    }
    
    public void teachAndAddVectors() {
        double magnitude, thetaAngle;

        thetaAngle = Double.parseDouble(angleInput.getText());
        magnitude = Double.parseDouble(magnitudeInput.getText());

        magnitudeInput.setText("");
        angleInput.setText("");

        vectorsListOutput.append(magnitude + " units [" + thetaAngle + "°]\n");
        
        breakUpVectors(magnitude, thetaAngle);
        
        changeSigns(thetaAngle);
        
        addUpXandYComponents();
        
        determineResultantMagnitude();

        determineResultantAngle();

        outputTextArea.append("\n\nThe resultant vector is " + formatVector.format(resultantVector) + " units [" + formatVector.format(resultantAngle) + "°]");
        resultantVectorOutput.setText("\n\n" + formatVector.format(resultantVector) + " units [" + formatVector.format(resultantAngle) + "°]");
        
        // trace variables
        System.out.println("angle = " + thetaAngle);
        System.out.println("x = " + formatVector.format(vectorX));
        System.out.println("y = " + formatVector.format(vectorY));
        System.out.println("resultant x = " + formatVector.format(resultantComponentX));
        System.out.println("resultant y = " + formatVector.format(resultantComponentY));
        System.out.println("resultant magnitude = " + formatVector.format(resultantVector));
        System.out.println("resultant angle = " + formatVector.format(resultantAngle));
    }
    
    public void breakUpVectors(double magnitude, double angle) {
        outputTextArea.setText("Okay, first we have to break up this vector into its x and y components.\n");

        vectorX = magnitude * Math.cos(Math.toRadians(angle));
        vectorY = magnitude * Math.sin(Math.toRadians(angle));

        vectorX = Double.parseDouble(formatVector.format(vectorX));
        vectorY = Double.parseDouble(formatVector.format(vectorY));

        outputTextArea.append("\nTo find the x component we have to use the formula x = r * cos(theta),\n" + magnitude + " * cos(" + angle + ") = " + vectorX + " units\n");
        outputTextArea.append("\nTo find the y component we have to use the formula y = r * sin(theta),\n" + magnitude + " * sin(" + angle + ") = " + vectorY + " units\n");
    }
    
    public void changeSigns(double angle) {
        outputTextArea.append("\nChange the x component to a negative if it's to the left of the y axis or negative side of the x axis (quadrant 2 or 3), but keep it the same if it's to the right of the y axis or positive side of the x axis (quadrant 1 or 4).\n");
        outputTextArea.append("\nChange the y component to a negative if it's below the x axis or negative side of the y axis (quadrant 3 or 4), but keep it the same if it's above the x axis or positive side of the y axis (quadrant 1or 2).\n\n");

        if ((angle > 90) && (angle < 270))
        {
            outputTextArea.append(vectorX + " units becomes" + -vectorX + " units\n");
            vectorX = -Math.abs(vectorX);
        }
        else
        {
            outputTextArea.append(vectorX + " units stays the same and does not need a negative.\n");
        }
        
        if ((angle > 180) && (angle < 360))
        {
            outputTextArea.append(vectorY + " units becomes" + -vectorY + " units\n");
            vectorY = -Math.abs(vectorY);
        }
        else
        {
            outputTextArea.append(vectorY + " units stays the same and does not need a negative.\n");
        }
    }
    
    public void addUpXandYComponents() {
        outputTextArea.append("\nAdd your x and y components to the resultant x and y components.\n\n");

        resultantComponentX += vectorX;
        resultantComponentY += vectorY;

        outputTextArea.append(formatVector.format(resultantComponentX - vectorX) + " + " + vectorX + " = " + resultantComponentX + "\n");
        outputTextArea.append(formatVector.format(resultantComponentY - vectorY) + " + " + vectorY + " = " + resultantComponentY + "\n\n");
    }
    
    public void determineResultantMagnitude() {
        outputTextArea.append("Use c = √((a)^2 + (b)^2) (pythagoreons theorem) with the resultant components as your a and b values to get your c value or your resultant vector.\n");

        resultantVector = Math.sqrt(Math.pow(resultantComponentX, 2) + Math.pow(resultantComponentY, 2));

        outputTextArea.append("√((" + resultantComponentX +" units))^2 + ((" + resultantComponentY +" units))^2 = " + formatVector.format(resultantVector) + " units\n\n");

        outputTextArea.append("Find the resultant angle.\n\nUse the formula θ = tan^-1(resultant y component / resultant x component)\n\n");
    }
    
    public void determineResultantAngle() {
        resultantAngle = Math.toDegrees(Math.atan(resultantComponentY / resultantComponentX));

        outputTextArea.append("The angle you get is the reference angle. You need to determine the actual angle by looking in which quadrant both the resultant x and y components are in by looking at the signs of the resultant x and y components. Based on which quadrant the angle is in, you can either add 0, 90, 180, or 270 to the resultant angle.\n\n");

        if ((resultantComponentX >= 0) && (resultantComponentY >= 0))
        {
            outputTextArea.append("Since the resultant vector is in quadrant 1, the resultant angle stays the same which is " + formatVector.format(resultantAngle) + "°");
        }
        else if ((resultantComponentX < 0) && (resultantComponentY >= 0))
        {
            outputTextArea.append("Since the resultant vector is in quadrant 2, the resultant angle is " + formatVector.format(resultantAngle) + "° + 180° = " + formatVector.format(resultantAngle + 180) + "°");
            resultantAngle += 180;
        }
        else if ((resultantComponentX < 0) && (resultantComponentY < 0))
        {
            outputTextArea.append("Since the resultant vector is in quadrant 3, the resultant angle is " + formatVector.format(resultantAngle) + "° + 180° = " + formatVector.format(resultantAngle + 180) + "°");
            resultantAngle += 180;
        }
        else
        {
            outputTextArea.append("Since the resultant vector is in quadrant 4, the resultant angle is " + formatVector.format(resultantAngle) + "° + 360° = " + formatVector.format(resultantAngle + 360) + "°");
            resultantAngle += 360;
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VectorAdditionCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VectorAdditionCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VectorAdditionCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VectorAdditionCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VectorAdditionCalculator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTextField angleInput;
    private javax.swing.JLabel angleLabel;
    private javax.swing.JButton clearVectorButton;
    private javax.swing.JLabel enterPositiveMag;
    private javax.swing.JLabel enterVectorInformationLabel;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField magnitudeInput;
    private javax.swing.JLabel magnitudeLabel;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JTextArea outputTextArea;
    private javax.swing.JLabel resultantVectorLabel;
    private javax.swing.JTextArea resultantVectorOutput;
    private javax.swing.JLabel vectorAdditionLabel;
    private javax.swing.JLabel vectorsListLabel;
    private javax.swing.JTextArea vectorsListOutput;
    // End of variables declaration//GEN-END:variables
}
